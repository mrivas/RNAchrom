#!/usr/bin/env python
import argparse, sys, numpy, matplotlib, itertools, scipy, re
from collections import defaultdict
###########################################################
# Get command line arguments
def getParser():
	parser = argparse.ArgumentParser(description='Count the connections between any two regions sharing at least one link.')
	parser.add_argument('-c',type=str,dest="cFile",help="STR. Name of file containing the connection between two or more regions")
	parser.add_argument('-o',type=str,dest="oFile",help="STR. Name of output file.")

	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
#########################################################
def main():
	args = getParser().parse_args()
	linksFile = args.cFile
	regions1,regions2 = args.rFiles.split(",")
	oFile = args.oFile

	# Collect data
	totalRNA,totalDNA = defaultdict(int), defaultdict(int)
	connectionsF,connectionsB = defaultdict(int), defaultdict(int)
	keys=set()
	for line in open(linksFile,"r"):
		line=line.strip().split("\t")
		region1=line[8] # RNA hotspot
		region2=line[9] # DNA hotspot
		if region1=="." and region2==".": continue
		totalRNA[region1]+=1
		totalDNA[region2]+=1
		if region1!="." and region2!=".":
			key=sorted([region1,region2])
			key="|".join( map(str,key) )
			if region1+"|"+region2==key:
				connectionsF[key]+=1
			else:
				connectionsB[key]+=1
			keys |= set([key])
	# Print results
	out=open(oFile,"w")
	output = ["chrom1","start1","end1","chrom2","start2","end2","forward","backward","out1","in1","out2","in2","ratio"]
	print >>out, "\t".join( map(str,output) )
	for key in keys:
		region1,region2=key.split("|")
		output  = re.split(':|-',region1) 
		output += re.split(':|-',region2)
		output += [ connectionsF[key], connectionsB[key] ]
		output += [ totalRNA[region1], totalDNA[region1] ]
		output += [ totalRNA[region2], totalDNA[region2] ]
		ratio = float( abs(connectionsF[key]-connectionsB[key]) )/max(totalRNA[region1]+totalDNA[region1], totalRNA[region2]+totalDNA[region2])
		output += [ ratio ]
		print >>out, "\t".join( map(str,output) )
########################################################
if __name__ == '__main__':
    main()
